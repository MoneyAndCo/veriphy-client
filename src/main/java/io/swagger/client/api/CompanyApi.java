/*
 * Veriphy API
 * This API provides access to the ID/AML, Company and Lawyer check services provided by Veriphy. This API is secured - please contact us to request test credentials.<br/>The API can send and receive either JSON or XML - please explore the API methods and the return types/parameters below.
 *
 * OpenAPI spec version: v1
 * Contact: support@veriphy.co.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.VeriphyCompanyRequestTO;
import io.swagger.client.model.VeriphyCompanyResponseTO;
import io.swagger.client.model.VeriphyCompanySearchRequestTO;
import io.swagger.client.model.VeriphyCompanySearchResponseTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CompanyApi {
    private ApiClient apiClient;

    public CompanyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CompanyApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for companyGet
     * @param checkID The Veriphy Check ID of the check to be retrieved (required)
     * @param userName Service credentials username (required)
     * @param password Service credentials password (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call companyGetCall(String checkID, String userName, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Company";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (checkID != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "checkID", checkID));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userName", userName));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call companyGetValidateBeforeCall(String checkID, String userName, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'checkID' is set
        if (checkID == null) {
            throw new ApiException("Missing the required parameter 'checkID' when calling companyGet(Async)");
        }
        
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling companyGet(Async)");
        }
        
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling companyGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = companyGetCall(checkID, userName, password, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve an existing UK or International company check.
     * Retrieves a check that has already been placed
     * @param checkID The Veriphy Check ID of the check to be retrieved (required)
     * @param userName Service credentials username (required)
     * @param password Service credentials password (required)
     * @return VeriphyCompanyResponseTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VeriphyCompanyResponseTO companyGet(String checkID, String userName, String password) throws ApiException {
        ApiResponse<VeriphyCompanyResponseTO> resp = companyGetWithHttpInfo(checkID, userName, password);
        return resp.getData();
    }

    /**
     * Retrieve an existing UK or International company check.
     * Retrieves a check that has already been placed
     * @param checkID The Veriphy Check ID of the check to be retrieved (required)
     * @param userName Service credentials username (required)
     * @param password Service credentials password (required)
     * @return ApiResponse&lt;VeriphyCompanyResponseTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VeriphyCompanyResponseTO> companyGetWithHttpInfo(String checkID, String userName, String password) throws ApiException {
        com.squareup.okhttp.Call call = companyGetValidateBeforeCall(checkID, userName, password, null, null);
        Type localVarReturnType = new TypeToken<VeriphyCompanyResponseTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an existing UK or International company check. (asynchronously)
     * Retrieves a check that has already been placed
     * @param checkID The Veriphy Check ID of the check to be retrieved (required)
     * @param userName Service credentials username (required)
     * @param password Service credentials password (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call companyGetAsync(String checkID, String userName, String password, final ApiCallback<VeriphyCompanyResponseTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = companyGetValidateBeforeCall(checkID, userName, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VeriphyCompanyResponseTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for companyPost
     * @param check The check to be performed (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call companyPostCall(VeriphyCompanyRequestTO check, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = check;
        
        // create path and map variables
        String localVarPath = "/Company";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call companyPostValidateBeforeCall(VeriphyCompanyRequestTO check, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'check' is set
        if (check == null) {
            throw new ApiException("Missing the required parameter 'check' when calling companyPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = companyPostCall(check, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Perform a UK or International company check.
     *  #VeriphyCompanyRequestTO   VeriphyIDAMLRequestTO is a DTO that contains all the information required by the service to perform an identity check. It consists of 3 objects:   * VeriphyServiceTO   * AuthenticationTO   * CompanyApplicationTO      ##VeriphyServiceTO   You must specify the service code in the &#x60;VeriphyServiceTO&#x60; object. Valid service codes are:   * **COMPUK** - UK Company Check   * **COMPINT** - International Company Check              A formatted PDF can also be returned by the API - simply set the &#x60;VeriphyServiceTO&#x60; *returnPDF* property to _true_ to receive the PDF as a Base64 encoded string.      ##AuthenticationTO   Specify your username and password to access the service. Credentials can be obtained from [Veriphy Support](mailto:support@veriphy.co.uk)      ##CompanyApplicationTO   The CompanyApplicationTO object contains the details about the company to be checked. Please populate the *companyNumber* property with the &#x60;SearchId&#x60; returned from the Company Search operation.      For German company checks a search reason code must be supplied. Please populate the &#x60;CompanyTO&#x60; *searchReason* field with the appropriate number from the list below.     * 1 - Credit Decisioning    * 2 - Credit Assessment - Future business connection(with credit risk)  * 3 - Credit Assessment - Existing business connection(with credit risk)  * 4 - Realisation check receivables collection                         * 5 - Purchase Contract - Intention of signature of purchase contract(with credit risk)  * 6 - Goods Credit Insurance(with credit risk)  * 7 - Contract - Intention of signature of leasing or rent contract(with credit risk)  * 8 - Insurance Contract - Intention of signature of a insurance contract(with credit risk)
     * @param check The check to be performed (required)
     * @return VeriphyCompanyResponseTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VeriphyCompanyResponseTO companyPost(VeriphyCompanyRequestTO check) throws ApiException {
        ApiResponse<VeriphyCompanyResponseTO> resp = companyPostWithHttpInfo(check);
        return resp.getData();
    }

    /**
     * Perform a UK or International company check.
     *  #VeriphyCompanyRequestTO   VeriphyIDAMLRequestTO is a DTO that contains all the information required by the service to perform an identity check. It consists of 3 objects:   * VeriphyServiceTO   * AuthenticationTO   * CompanyApplicationTO      ##VeriphyServiceTO   You must specify the service code in the &#x60;VeriphyServiceTO&#x60; object. Valid service codes are:   * **COMPUK** - UK Company Check   * **COMPINT** - International Company Check              A formatted PDF can also be returned by the API - simply set the &#x60;VeriphyServiceTO&#x60; *returnPDF* property to _true_ to receive the PDF as a Base64 encoded string.      ##AuthenticationTO   Specify your username and password to access the service. Credentials can be obtained from [Veriphy Support](mailto:support@veriphy.co.uk)      ##CompanyApplicationTO   The CompanyApplicationTO object contains the details about the company to be checked. Please populate the *companyNumber* property with the &#x60;SearchId&#x60; returned from the Company Search operation.      For German company checks a search reason code must be supplied. Please populate the &#x60;CompanyTO&#x60; *searchReason* field with the appropriate number from the list below.     * 1 - Credit Decisioning    * 2 - Credit Assessment - Future business connection(with credit risk)  * 3 - Credit Assessment - Existing business connection(with credit risk)  * 4 - Realisation check receivables collection                         * 5 - Purchase Contract - Intention of signature of purchase contract(with credit risk)  * 6 - Goods Credit Insurance(with credit risk)  * 7 - Contract - Intention of signature of leasing or rent contract(with credit risk)  * 8 - Insurance Contract - Intention of signature of a insurance contract(with credit risk)
     * @param check The check to be performed (required)
     * @return ApiResponse&lt;VeriphyCompanyResponseTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VeriphyCompanyResponseTO> companyPostWithHttpInfo(VeriphyCompanyRequestTO check) throws ApiException {
        com.squareup.okhttp.Call call = companyPostValidateBeforeCall(check, null, null);
        Type localVarReturnType = new TypeToken<VeriphyCompanyResponseTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Perform a UK or International company check. (asynchronously)
     *  #VeriphyCompanyRequestTO   VeriphyIDAMLRequestTO is a DTO that contains all the information required by the service to perform an identity check. It consists of 3 objects:   * VeriphyServiceTO   * AuthenticationTO   * CompanyApplicationTO      ##VeriphyServiceTO   You must specify the service code in the &#x60;VeriphyServiceTO&#x60; object. Valid service codes are:   * **COMPUK** - UK Company Check   * **COMPINT** - International Company Check              A formatted PDF can also be returned by the API - simply set the &#x60;VeriphyServiceTO&#x60; *returnPDF* property to _true_ to receive the PDF as a Base64 encoded string.      ##AuthenticationTO   Specify your username and password to access the service. Credentials can be obtained from [Veriphy Support](mailto:support@veriphy.co.uk)      ##CompanyApplicationTO   The CompanyApplicationTO object contains the details about the company to be checked. Please populate the *companyNumber* property with the &#x60;SearchId&#x60; returned from the Company Search operation.      For German company checks a search reason code must be supplied. Please populate the &#x60;CompanyTO&#x60; *searchReason* field with the appropriate number from the list below.     * 1 - Credit Decisioning    * 2 - Credit Assessment - Future business connection(with credit risk)  * 3 - Credit Assessment - Existing business connection(with credit risk)  * 4 - Realisation check receivables collection                         * 5 - Purchase Contract - Intention of signature of purchase contract(with credit risk)  * 6 - Goods Credit Insurance(with credit risk)  * 7 - Contract - Intention of signature of leasing or rent contract(with credit risk)  * 8 - Insurance Contract - Intention of signature of a insurance contract(with credit risk)
     * @param check The check to be performed (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call companyPostAsync(VeriphyCompanyRequestTO check, final ApiCallback<VeriphyCompanyResponseTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = companyPostValidateBeforeCall(check, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VeriphyCompanyResponseTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for companySearch
     * @param check A VeriphyCompanySearchRequestTO object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call companySearchCall(VeriphyCompanySearchRequestTO check, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = check;
        
        // create path and map variables
        String localVarPath = "/Company/Search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call companySearchValidateBeforeCall(VeriphyCompanySearchRequestTO check, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'check' is set
        if (check == null) {
            throw new ApiException("Missing the required parameter 'check' when calling companySearch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = companySearchCall(check, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search for a UK or International company.
     * Locates companies in the UK or internationally that match the search term provided. The results of this search can be used to retrieve UK or International Company Checks.
     * @param check A VeriphyCompanySearchRequestTO object (required)
     * @return VeriphyCompanySearchResponseTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VeriphyCompanySearchResponseTO companySearch(VeriphyCompanySearchRequestTO check) throws ApiException {
        ApiResponse<VeriphyCompanySearchResponseTO> resp = companySearchWithHttpInfo(check);
        return resp.getData();
    }

    /**
     * Search for a UK or International company.
     * Locates companies in the UK or internationally that match the search term provided. The results of this search can be used to retrieve UK or International Company Checks.
     * @param check A VeriphyCompanySearchRequestTO object (required)
     * @return ApiResponse&lt;VeriphyCompanySearchResponseTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VeriphyCompanySearchResponseTO> companySearchWithHttpInfo(VeriphyCompanySearchRequestTO check) throws ApiException {
        com.squareup.okhttp.Call call = companySearchValidateBeforeCall(check, null, null);
        Type localVarReturnType = new TypeToken<VeriphyCompanySearchResponseTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search for a UK or International company. (asynchronously)
     * Locates companies in the UK or internationally that match the search term provided. The results of this search can be used to retrieve UK or International Company Checks.
     * @param check A VeriphyCompanySearchRequestTO object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call companySearchAsync(VeriphyCompanySearchRequestTO check, final ApiCallback<VeriphyCompanySearchResponseTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = companySearchValidateBeforeCall(check, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VeriphyCompanySearchResponseTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
