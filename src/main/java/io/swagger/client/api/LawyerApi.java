/*
 * Veriphy API
 * This API provides access to the ID/AML, Company and Lawyer check services provided by Veriphy. This API is secured - please contact us to request test credentials.<br/>The API can send and receive either JSON or XML - please explore the API methods and the return types/parameters below.
 *
 * OpenAPI spec version: v1
 * Contact: support@veriphy.co.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.VeriphyLawyerCheckRequestTO;
import io.swagger.client.model.VeriphyLawyerCheckResponseTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LawyerApi {
    private ApiClient apiClient;

    public LawyerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LawyerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for lawyerGet
     * @param checkID The Veriphy Check ID of the check to be retrieved (required)
     * @param userName Service credentials username (required)
     * @param password Service credentials password (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lawyerGetCall(String checkID, String userName, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Lawyer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (checkID != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "checkID", checkID));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userName", userName));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lawyerGetValidateBeforeCall(String checkID, String userName, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'checkID' is set
        if (checkID == null) {
            throw new ApiException("Missing the required parameter 'checkID' when calling lawyerGet(Async)");
        }
        
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling lawyerGet(Async)");
        }
        
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling lawyerGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = lawyerGetCall(checkID, userName, password, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve an existing Lawyer check.
     * Retrieves a check that has already been placed
     * @param checkID The Veriphy Check ID of the check to be retrieved (required)
     * @param userName Service credentials username (required)
     * @param password Service credentials password (required)
     * @return VeriphyLawyerCheckResponseTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VeriphyLawyerCheckResponseTO lawyerGet(String checkID, String userName, String password) throws ApiException {
        ApiResponse<VeriphyLawyerCheckResponseTO> resp = lawyerGetWithHttpInfo(checkID, userName, password);
        return resp.getData();
    }

    /**
     * Retrieve an existing Lawyer check.
     * Retrieves a check that has already been placed
     * @param checkID The Veriphy Check ID of the check to be retrieved (required)
     * @param userName Service credentials username (required)
     * @param password Service credentials password (required)
     * @return ApiResponse&lt;VeriphyLawyerCheckResponseTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VeriphyLawyerCheckResponseTO> lawyerGetWithHttpInfo(String checkID, String userName, String password) throws ApiException {
        com.squareup.okhttp.Call call = lawyerGetValidateBeforeCall(checkID, userName, password, null, null);
        Type localVarReturnType = new TypeToken<VeriphyLawyerCheckResponseTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an existing Lawyer check. (asynchronously)
     * Retrieves a check that has already been placed
     * @param checkID The Veriphy Check ID of the check to be retrieved (required)
     * @param userName Service credentials username (required)
     * @param password Service credentials password (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lawyerGetAsync(String checkID, String userName, String password, final ApiCallback<VeriphyLawyerCheckResponseTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lawyerGetValidateBeforeCall(checkID, userName, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VeriphyLawyerCheckResponseTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lawyerPost
     * @param check The check to be performed (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lawyerPostCall(VeriphyLawyerCheckRequestTO check, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = check;
        
        // create path and map variables
        String localVarPath = "/Lawyer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lawyerPostValidateBeforeCall(VeriphyLawyerCheckRequestTO check, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'check' is set
        if (check == null) {
            throw new ApiException("Missing the required parameter 'check' when calling lawyerPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = lawyerPostCall(check, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Perform a Lawyer check.
     * #VeriphyLawyerCheckRequestTO  VeriphyLawyerCheckRequestTO is a DTO that contains all the information required by the service to perform an identity check. It consists of 3 objects:  * VeriphyServiceTO  * AuthenticationTO  * LawyerTO    ##VeriphyServiceTO  You must specify the service code in the &#x60;VeriphyServiceTO&#x60; object. Valid service codes are:  * **LAWYERCHECK** - Lawyer Check    A formatted PDF can also be returned by the API - simply set the &#x60;VeriphyServiceTO&#x60; *returnPDF* property to _true_.    ##AuthenticationTO  Specify your username and password to access the service. Credentials can be obtained from [Veriphy Support](mailto:support@veriphy.co.uk)    ##LawyerTO  The LawyerTO object contains the details about the company to be checked.
     * @param check The check to be performed (required)
     * @return VeriphyLawyerCheckResponseTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VeriphyLawyerCheckResponseTO lawyerPost(VeriphyLawyerCheckRequestTO check) throws ApiException {
        ApiResponse<VeriphyLawyerCheckResponseTO> resp = lawyerPostWithHttpInfo(check);
        return resp.getData();
    }

    /**
     * Perform a Lawyer check.
     * #VeriphyLawyerCheckRequestTO  VeriphyLawyerCheckRequestTO is a DTO that contains all the information required by the service to perform an identity check. It consists of 3 objects:  * VeriphyServiceTO  * AuthenticationTO  * LawyerTO    ##VeriphyServiceTO  You must specify the service code in the &#x60;VeriphyServiceTO&#x60; object. Valid service codes are:  * **LAWYERCHECK** - Lawyer Check    A formatted PDF can also be returned by the API - simply set the &#x60;VeriphyServiceTO&#x60; *returnPDF* property to _true_.    ##AuthenticationTO  Specify your username and password to access the service. Credentials can be obtained from [Veriphy Support](mailto:support@veriphy.co.uk)    ##LawyerTO  The LawyerTO object contains the details about the company to be checked.
     * @param check The check to be performed (required)
     * @return ApiResponse&lt;VeriphyLawyerCheckResponseTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VeriphyLawyerCheckResponseTO> lawyerPostWithHttpInfo(VeriphyLawyerCheckRequestTO check) throws ApiException {
        com.squareup.okhttp.Call call = lawyerPostValidateBeforeCall(check, null, null);
        Type localVarReturnType = new TypeToken<VeriphyLawyerCheckResponseTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Perform a Lawyer check. (asynchronously)
     * #VeriphyLawyerCheckRequestTO  VeriphyLawyerCheckRequestTO is a DTO that contains all the information required by the service to perform an identity check. It consists of 3 objects:  * VeriphyServiceTO  * AuthenticationTO  * LawyerTO    ##VeriphyServiceTO  You must specify the service code in the &#x60;VeriphyServiceTO&#x60; object. Valid service codes are:  * **LAWYERCHECK** - Lawyer Check    A formatted PDF can also be returned by the API - simply set the &#x60;VeriphyServiceTO&#x60; *returnPDF* property to _true_.    ##AuthenticationTO  Specify your username and password to access the service. Credentials can be obtained from [Veriphy Support](mailto:support@veriphy.co.uk)    ##LawyerTO  The LawyerTO object contains the details about the company to be checked.
     * @param check The check to be performed (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lawyerPostAsync(VeriphyLawyerCheckRequestTO check, final ApiCallback<VeriphyLawyerCheckResponseTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lawyerPostValidateBeforeCall(check, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VeriphyLawyerCheckResponseTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
