/*
 * Veriphy API
 * This API provides access to the ID/AML, Company and Lawyer check services provided by Veriphy. This API is secured - please contact us to request test credentials.<br/>The API can send and receive either JSON or XML - please explore the API methods and the return types/parameters below.
 *
 * OpenAPI spec version: v1
 * Contact: support@veriphy.co.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.VeriphyIDAMLRequestTO;
import io.swagger.client.model.VeriphyIDAMLResponseTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IDAMLApi {
    private ApiClient apiClient;

    public IDAMLApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IDAMLApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for iDAMLGet
     * @param checkID Veriphy Check ID of the check to be retrieved (required)
     * @param userName Service credentials username (required)
     * @param password Service credentials password (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iDAMLGetCall(String checkID, String userName, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/IDAML";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (checkID != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "checkID", checkID));
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userName", userName));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iDAMLGetValidateBeforeCall(String checkID, String userName, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'checkID' is set
        if (checkID == null) {
            throw new ApiException("Missing the required parameter 'checkID' when calling iDAMLGet(Async)");
        }
        
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling iDAMLGet(Async)");
        }
        
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling iDAMLGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = iDAMLGetCall(checkID, userName, password, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve an existing ID/AML check.
     * Retrieves a check that has already been placed
     * @param checkID Veriphy Check ID of the check to be retrieved (required)
     * @param userName Service credentials username (required)
     * @param password Service credentials password (required)
     * @return VeriphyIDAMLResponseTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VeriphyIDAMLResponseTO iDAMLGet(String checkID, String userName, String password) throws ApiException {
        ApiResponse<VeriphyIDAMLResponseTO> resp = iDAMLGetWithHttpInfo(checkID, userName, password);
        return resp.getData();
    }

    /**
     * Retrieve an existing ID/AML check.
     * Retrieves a check that has already been placed
     * @param checkID Veriphy Check ID of the check to be retrieved (required)
     * @param userName Service credentials username (required)
     * @param password Service credentials password (required)
     * @return ApiResponse&lt;VeriphyIDAMLResponseTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VeriphyIDAMLResponseTO> iDAMLGetWithHttpInfo(String checkID, String userName, String password) throws ApiException {
        com.squareup.okhttp.Call call = iDAMLGetValidateBeforeCall(checkID, userName, password, null, null);
        Type localVarReturnType = new TypeToken<VeriphyIDAMLResponseTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an existing ID/AML check. (asynchronously)
     * Retrieves a check that has already been placed
     * @param checkID Veriphy Check ID of the check to be retrieved (required)
     * @param userName Service credentials username (required)
     * @param password Service credentials password (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iDAMLGetAsync(String checkID, String userName, String password, final ApiCallback<VeriphyIDAMLResponseTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iDAMLGetValidateBeforeCall(checkID, userName, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VeriphyIDAMLResponseTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for iDAMLPost
     * @param check The check to be performed (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call iDAMLPostCall(VeriphyIDAMLRequestTO check, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = check;
        
        // create path and map variables
        String localVarPath = "/IDAML";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call iDAMLPostValidateBeforeCall(VeriphyIDAMLRequestTO check, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'check' is set
        if (check == null) {
            throw new ApiException("Missing the required parameter 'check' when calling iDAMLPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = iDAMLPostCall(check, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Perform an ID/AML check.
     * #VeriphyIDAMLRequestTO  VeriphyIDAMLRequestTO is a DTO that contains all the information required by the service to perform an identity check. It consists of 3 objects:  * VeriphyServiceTO  * AuthenticationTO  * ApplicationTO    ##VeriphyServiceTO  You must specify the service code in the &#x60;VeriphyServiceTO&#x60; object. Valid service codes are:  * **IDAMLNOCRED** - Anti-money Laundering Check  * **CREDACTIVE** - Credit Screen  * **IDAML** - AML and Credit Screen  * **INTID** - International ID Check  * **HR** - HR Screen  * **DIRSEARCH** - Director search  * **ROUTE2** - Identity Check  * **360** - Veriphy 360  * **VISA** - Travel Visa Check    A formatted PDF can also be returned by the API - simply set the &#x60;VeriphyServiceTO&#x60; *returnPDF* property to _true_ to receive the PDF as a Base64 encoded string.    ##AuthenticationTO  Specify your username and password to access the service. Credentials can be obtained from [Veriphy Support](mailto:support@veriphy.co.uk)    ##ApplicationTO  The ApplicationTO object contains the details about the individual to be checked. Each request requires all the transfer objects to be supplied even if they will not be used in the check. Please supply empty string values for unused transfer objects. Refer to the Parameters section below for the request model and an example request value.  * **All** &#x60;ApplicantTO&#x60; objects must contain a &#x60;NameTO&#x60;, &#x60;Gender&#x60; and &#x60;DOB&#x60;  * IDAML/IDAMLNOCRED/ROUTE2 must contain an &#x60;AddressTO&#x60; with optional &#x60;ContactTO&#x60;, &#x60;NationalInsuranceNumber&#x60;, &#x60;InternationalPassportTO&#x60; and &#x60;DrivingLicenceTO&#x60; supported.  * CREDACTIVE must contain an &#x60;AddressTO&#x60; object. No other objects are required/supported.  * INTID supports optional &#x60;ContactTO&#x60;, &#x60;NationalInsuranceNumber&#x60;, &#x60;InternationalPassportTO&#x60;, &#x60;DrivingLicenceTO&#x60; and &#x60;IDCardTO&#x60; objects. &#x60;AddressTO&#x60; is not required/supported on this check.  * HR must contain an &#x60;AddressTO&#x60; with optional &#x60;ContactTO&#x60;, &#x60;NationalInsuranceNumber&#x60;, &#x60;InternationalPassportTO&#x60;, &#x60;DrivingLicenceTO&#x60; and &#x60;BankTO&#x60; supported.  * DIRSEARCH must contain an &#x60;AddressTO&#x60; object.  * 360  must contain an &#x60;AddressTO&#x60; with optional &#x60;ContactTO&#x60;, &#x60;NationalInsuranceNumber&#x60;, &#x60;InternationalPassportTO&#x60;, &#x60;DrivingLicenceTO&#x60;, &#x60;IDCardTO&#x60;, &#x60;TravelVisaTO&#x60; and &#x60;BankTO&#x60; supported.  * VISA supports optional &#x60;ContactTO&#x60;, &#x60;NationalInsuranceNumber&#x60;, &#x60;InternationalPassportTO&#x60;, &#x60;DrivingLicenceTO&#x60;, &#x60;IDCardTO&#x60; and &#x60;TravelVisaTO&#x60; objects. &#x60;AddressTO&#x60; is not required/supported on this check.
     * @param check The check to be performed (required)
     * @return VeriphyIDAMLResponseTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VeriphyIDAMLResponseTO iDAMLPost(VeriphyIDAMLRequestTO check) throws ApiException {
        ApiResponse<VeriphyIDAMLResponseTO> resp = iDAMLPostWithHttpInfo(check);
        return resp.getData();
    }

    /**
     * Perform an ID/AML check.
     * #VeriphyIDAMLRequestTO  VeriphyIDAMLRequestTO is a DTO that contains all the information required by the service to perform an identity check. It consists of 3 objects:  * VeriphyServiceTO  * AuthenticationTO  * ApplicationTO    ##VeriphyServiceTO  You must specify the service code in the &#x60;VeriphyServiceTO&#x60; object. Valid service codes are:  * **IDAMLNOCRED** - Anti-money Laundering Check  * **CREDACTIVE** - Credit Screen  * **IDAML** - AML and Credit Screen  * **INTID** - International ID Check  * **HR** - HR Screen  * **DIRSEARCH** - Director search  * **ROUTE2** - Identity Check  * **360** - Veriphy 360  * **VISA** - Travel Visa Check    A formatted PDF can also be returned by the API - simply set the &#x60;VeriphyServiceTO&#x60; *returnPDF* property to _true_ to receive the PDF as a Base64 encoded string.    ##AuthenticationTO  Specify your username and password to access the service. Credentials can be obtained from [Veriphy Support](mailto:support@veriphy.co.uk)    ##ApplicationTO  The ApplicationTO object contains the details about the individual to be checked. Each request requires all the transfer objects to be supplied even if they will not be used in the check. Please supply empty string values for unused transfer objects. Refer to the Parameters section below for the request model and an example request value.  * **All** &#x60;ApplicantTO&#x60; objects must contain a &#x60;NameTO&#x60;, &#x60;Gender&#x60; and &#x60;DOB&#x60;  * IDAML/IDAMLNOCRED/ROUTE2 must contain an &#x60;AddressTO&#x60; with optional &#x60;ContactTO&#x60;, &#x60;NationalInsuranceNumber&#x60;, &#x60;InternationalPassportTO&#x60; and &#x60;DrivingLicenceTO&#x60; supported.  * CREDACTIVE must contain an &#x60;AddressTO&#x60; object. No other objects are required/supported.  * INTID supports optional &#x60;ContactTO&#x60;, &#x60;NationalInsuranceNumber&#x60;, &#x60;InternationalPassportTO&#x60;, &#x60;DrivingLicenceTO&#x60; and &#x60;IDCardTO&#x60; objects. &#x60;AddressTO&#x60; is not required/supported on this check.  * HR must contain an &#x60;AddressTO&#x60; with optional &#x60;ContactTO&#x60;, &#x60;NationalInsuranceNumber&#x60;, &#x60;InternationalPassportTO&#x60;, &#x60;DrivingLicenceTO&#x60; and &#x60;BankTO&#x60; supported.  * DIRSEARCH must contain an &#x60;AddressTO&#x60; object.  * 360  must contain an &#x60;AddressTO&#x60; with optional &#x60;ContactTO&#x60;, &#x60;NationalInsuranceNumber&#x60;, &#x60;InternationalPassportTO&#x60;, &#x60;DrivingLicenceTO&#x60;, &#x60;IDCardTO&#x60;, &#x60;TravelVisaTO&#x60; and &#x60;BankTO&#x60; supported.  * VISA supports optional &#x60;ContactTO&#x60;, &#x60;NationalInsuranceNumber&#x60;, &#x60;InternationalPassportTO&#x60;, &#x60;DrivingLicenceTO&#x60;, &#x60;IDCardTO&#x60; and &#x60;TravelVisaTO&#x60; objects. &#x60;AddressTO&#x60; is not required/supported on this check.
     * @param check The check to be performed (required)
     * @return ApiResponse&lt;VeriphyIDAMLResponseTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VeriphyIDAMLResponseTO> iDAMLPostWithHttpInfo(VeriphyIDAMLRequestTO check) throws ApiException {
        com.squareup.okhttp.Call call = iDAMLPostValidateBeforeCall(check, null, null);
        Type localVarReturnType = new TypeToken<VeriphyIDAMLResponseTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Perform an ID/AML check. (asynchronously)
     * #VeriphyIDAMLRequestTO  VeriphyIDAMLRequestTO is a DTO that contains all the information required by the service to perform an identity check. It consists of 3 objects:  * VeriphyServiceTO  * AuthenticationTO  * ApplicationTO    ##VeriphyServiceTO  You must specify the service code in the &#x60;VeriphyServiceTO&#x60; object. Valid service codes are:  * **IDAMLNOCRED** - Anti-money Laundering Check  * **CREDACTIVE** - Credit Screen  * **IDAML** - AML and Credit Screen  * **INTID** - International ID Check  * **HR** - HR Screen  * **DIRSEARCH** - Director search  * **ROUTE2** - Identity Check  * **360** - Veriphy 360  * **VISA** - Travel Visa Check    A formatted PDF can also be returned by the API - simply set the &#x60;VeriphyServiceTO&#x60; *returnPDF* property to _true_ to receive the PDF as a Base64 encoded string.    ##AuthenticationTO  Specify your username and password to access the service. Credentials can be obtained from [Veriphy Support](mailto:support@veriphy.co.uk)    ##ApplicationTO  The ApplicationTO object contains the details about the individual to be checked. Each request requires all the transfer objects to be supplied even if they will not be used in the check. Please supply empty string values for unused transfer objects. Refer to the Parameters section below for the request model and an example request value.  * **All** &#x60;ApplicantTO&#x60; objects must contain a &#x60;NameTO&#x60;, &#x60;Gender&#x60; and &#x60;DOB&#x60;  * IDAML/IDAMLNOCRED/ROUTE2 must contain an &#x60;AddressTO&#x60; with optional &#x60;ContactTO&#x60;, &#x60;NationalInsuranceNumber&#x60;, &#x60;InternationalPassportTO&#x60; and &#x60;DrivingLicenceTO&#x60; supported.  * CREDACTIVE must contain an &#x60;AddressTO&#x60; object. No other objects are required/supported.  * INTID supports optional &#x60;ContactTO&#x60;, &#x60;NationalInsuranceNumber&#x60;, &#x60;InternationalPassportTO&#x60;, &#x60;DrivingLicenceTO&#x60; and &#x60;IDCardTO&#x60; objects. &#x60;AddressTO&#x60; is not required/supported on this check.  * HR must contain an &#x60;AddressTO&#x60; with optional &#x60;ContactTO&#x60;, &#x60;NationalInsuranceNumber&#x60;, &#x60;InternationalPassportTO&#x60;, &#x60;DrivingLicenceTO&#x60; and &#x60;BankTO&#x60; supported.  * DIRSEARCH must contain an &#x60;AddressTO&#x60; object.  * 360  must contain an &#x60;AddressTO&#x60; with optional &#x60;ContactTO&#x60;, &#x60;NationalInsuranceNumber&#x60;, &#x60;InternationalPassportTO&#x60;, &#x60;DrivingLicenceTO&#x60;, &#x60;IDCardTO&#x60;, &#x60;TravelVisaTO&#x60; and &#x60;BankTO&#x60; supported.  * VISA supports optional &#x60;ContactTO&#x60;, &#x60;NationalInsuranceNumber&#x60;, &#x60;InternationalPassportTO&#x60;, &#x60;DrivingLicenceTO&#x60;, &#x60;IDCardTO&#x60; and &#x60;TravelVisaTO&#x60; objects. &#x60;AddressTO&#x60; is not required/supported on this check.
     * @param check The check to be performed (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call iDAMLPostAsync(VeriphyIDAMLRequestTO check, final ApiCallback<VeriphyIDAMLResponseTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = iDAMLPostValidateBeforeCall(check, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VeriphyIDAMLResponseTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
